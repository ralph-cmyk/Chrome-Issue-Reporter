name: Create release on merge to main
on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Determine next version
        id: version
        run: |
          set -euo pipefail

          # Get the highest numeric version tag (format: vN where N is a number)
          LATEST_VERSION=$(git tag -l 'v*' | grep -E '^v[0-9]+$' | sed 's/^v//' | sort -n | tail -1 || true)

          # If no version tags exist, start at 0
          if [ -z "$LATEST_VERSION" ]; then
            LATEST_VERSION=0
          fi

          # Increment version
          NEXT_VERSION=$((LATEST_VERSION + 1))
          TAG="v${NEXT_VERSION}"

          echo "Latest version: v${LATEST_VERSION}"
          echo "Next version: ${TAG}"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "version=${NEXT_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Build and package extension
        run: npm run package

      - name: Delete previous releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Deleting previous releases..."
          
          # Get all releases
          RELEASES=$(gh release list --limit 100 --json tagName,id)
          
          # Delete all releases
          echo "$RELEASES" | jq -r '.[] | "\(.id) \(.tagName)"' | while read -r id tag; do
            echo "Deleting release: $tag (ID: $id)"
            gh release delete "$tag" --yes || true
          done
          
          # Delete all tags
          git fetch --tags
          git tag -l | while read -r tag; do
            echo "Deleting tag: $tag"
            git push --delete origin "$tag" || true
            git tag -d "$tag" || true
          done
          
          echo "Cleanup complete"

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          
          echo "Created and pushed tag: $TAG"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          files: chrome-issue-reporter-extension.zip
          make_latest: true
          body: |
            ## Chrome Issue Reporter ${{ steps.version.outputs.tag }}
            
            ### ‚ö†Ô∏è IMPORTANT: Download the Correct File
            
            **‚úÖ Download:** `chrome-issue-reporter-extension.zip` (the built extension package)
            
            **‚ùå DO NOT download:** Source code (zip) or Source code (tar.gz) - these contain the repository structure and will NOT work with Chrome!
            
            ### Installation Instructions
            
            1. **Download** `chrome-issue-reporter-extension.zip` from the Assets section below
            2. **Extract** the ZIP file to a permanent location on your computer
            3. **Open Chrome** and navigate to `chrome://extensions/`
            4. **Enable** Developer mode (toggle in the top-right corner)
            5. **Click** "Load unpacked" and select the extracted folder
            
            üìñ For detailed step-by-step instructions, see [INSTALL.md](https://github.com/${{ github.repository }}/blob/main/INSTALL.md)
            
            ### What's Included
            
            This package contains:
            - Complete Chrome extension files (Manifest V3)
            - All required JavaScript, HTML, and JSON files
            - Ready to load directly into Chrome
            
            ### Configuration Required
            
            After installation, configure the extension:
            1. Open the extension's **Options** page
            2. Sign in with GitHub using Device Flow (no OAuth app needed!)
            3. Select your target repository
            4. Start creating issues!
            
            üìñ See [QUICKSTART.md](https://github.com/${{ github.repository }}/blob/main/QUICKSTART.md) for a 7-minute setup guide
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
